#!/usr/bin/python

import RPi.GPIO as GPIO
import time, sys, os

MyIdTag = "SumpB"
MyIdTagInterval = "SumpBInterval"

# Ignore effect of humidity
speedOfSound = 343.4 # m/s 20 degrees C from WolframAlpha
#speedOfSound = 342.2 # m/s 18 degrees C from WolframAlpha
#speedOfSound = 341.6 # m/s 17 degrees C from WolframAlpha
Factor = speedOfSound /2. * 39.3701 # to convert to inches
ReferenceDistance = 27.0 # measured distance when sitting on floor

GPIO.setwarnings(False)

# to use Raspberry Pi board pin numbers
GPIO.setmode(GPIO.BOARD)

# set up GPIO output channel
GPIO.setup(12, GPIO.OUT)

GPIO.setup(16, GPIO.IN)


def writeDistance(distance, idTag):
	sys.stderr.write("%s %s: distance %f\n" % (time.ctime(), idTag, distance))
	cosm = open("cosm.json", "w")
	cosm.write("""
{
  "version":"1.0.0",
  "datastreams":[
      {"id":"%s", "current_value":"%.1f"}
  ]
}
""" % (idTag, distance))
	cosm.close()

class RangeSensor:
	def __init__(self):
		self.last = None
		self.limit = 0.5

	def measureOnce(self):
		GPIO.output(12, GPIO.HIGH)
		time.sleep(0.001)
		GPIO.output(12, GPIO.LOW)

		# limit so doesn't run forever!
		stop = None
		start = None
		for count1 in xrange(10000):
			inp = GPIO.input(16)
			if inp:
				start = time.time()
				break

		# limit so doesn't run forever!
		for count2 in xrange(10000):
			inp = GPIO.input(16)
			if not inp:
				stop = time.time()
				break

		#sys.stderr.write("# %s count1 %d, count2 %d\n" % (time.ctime(), count1, count2))
		if stop == None or start == None:
			return None
		deltaT = stop - start
		distance = deltaT * Factor

		distance = ReferenceDistance - distance
		return distance

	def measure(self):
		m1 = self.measureOnce()
		if m1 == None:
			return None
		if self.last == None:
			self.last = m1

		delta = abs(m1 - self.last)
		if delta > self.limit:
			# remeasure quickly
			time.sleep(1.0)
			m2 = self.measureOnce()
			if m2 == None:
				return None
			sys.stderr.write("# %s last %f, m1 %f, m2 %f\n" % (time.ctime(), self.last, m1, m2))
			delta2 = abs(m2 - self.last)
			if delta2 > self.limit:
				# measurement really did change that much
				self.last = m1
			else:
				# things have likely settled down
				self.last = m2
		else:
			self.last = m1
		return self.last

def sendToCosm():
	os.system('./sendToCosm')

def doit(interval):
	rs = RangeSensor()
	last = -1000
	lastTime = None
	armed = 1
	while 1:
		start = time.time()
		distance = rs.measure()
		if distance == None:
			time.sleep(0.5)
			continue;

		# only look at rapid downslopes (from the pump running)
		velocity = distance - last
		if velocity > 0.0:
			armed = 1
		#sys.stderr.write("# velocity %.2f, armed %d, lastTime %s\n" % (velocity, armed, lastTime))
		if velocity < -1.0 and armed:
			# have an event
			#sys.stderr.write("# event velocity %.2f, armed %d, lastTime %s\n" % (velocity, armed, lastTime))
			if lastTime != None:
				deltaT = (start - lastTime) / 60.0 # convert to minutes
				writeDistance(deltaT, MyIdTagInterval)
				sendToCosm()
			lastTime = start
			armed = 0
		last = distance

		# send to cosm
		writeDistance(distance, MyIdTag)
		sendToCosm()
		now = time.time()
		sleepTime = start + interval - now
		if sleepTime < 0.:
			sys.stderr.write("# fast sleepTime is negative! %.2f\n" % sleepTime)
			sleepTime = 0.0
		time.sleep(interval)

		#sys.stderr.write("# start %.2f, interval %.2f, now %.2f, sleepTime %.2f\n" % (start, interval, now, sleepTime))


def main():
	interval = 10.0
	doit(interval)

main()
